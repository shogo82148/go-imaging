package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"math"
	"os"

	"github.com/shogo82148/float16"
)

func main() {
	buf := &bytes.Buffer{}
	fmt.Fprint(buf, `// Code generated by internal/gen/main.go; DO NOT EDIT.

package srgb

import (
	"github.com/shogo82148/float16"
)

`)

	fmt.Fprint(buf, `// encodedToLinearTable converts 8-bit sRGB encoded value to binary16 float linear value.
	var encodedToLinearTable = [256]float16.Float16{
	`)
	for i := 0; i < 0x100; i++ {
		v := float64(i) / 0xff
		w := encodedToLinear(max(0, min(1, v)))
		fmt.Fprintf(buf, "0x%04x, // %d\n", float16.FromFloat64(w).Bits(), i)
	}
	fmt.Fprint(buf, "}\n\n")

	fmt.Fprint(buf, `// encodedToLinearTable16 converts 16-bit sRGB encoded value to binary16 float linear value.
	var encodedToLinearTable16 = [65536]float16.Float16{
	`)
	for i := 0; i < 0x10000; i++ {
		v := float64(i) / 0xffff
		w := encodedToLinear(max(0, min(1, v)))
		fmt.Fprintf(buf, "0x%04x, // %d\n", float16.FromFloat64(w).Bits(), i)
	}
	fmt.Fprint(buf, "}\n\n")

	fmt.Fprint(buf, `// linearToEncodedTable16 converts binary16 float linear value to 16-bit sRGB encoded value.
	var linearToEncodedTable16 = [65536]uint16{
	`)
	for i := 0; i < 0x10000; i++ {
		v := float16.FromBits(uint16(i)).Float64()
		w := linearToEncoded(max(0, min(1, v)))
		fmt.Fprintf(buf, "0x%04x, // %.3x\n", uint16(math.RoundToEven(w*0xffff)), v)
	}
	fmt.Fprint(buf, "}\n\n")

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	if err := os.WriteFile("table_gen.go", out, 0644); err != nil {
		log.Fatal(err)
	}
}

func encodedToLinear(v float64) float64 {
	// https://en.wikipedia.org/wiki/SRGB#From_sRGB_to_CIE_XYZ
	if v <= 0.0031308*12.92 {
		return v / 12.92
	}
	return math.Pow((v+0.055)/1.055, 2.4)
}

func linearToEncoded(v float64) float64 {
	// https://en.wikipedia.org/wiki/SRGB#From_CIE_XYZ_to_sRGB
	if v <= 0.0031308 {
		return v * 12.92
	}
	return 1.055*math.Pow(v, 1/2.4) - 0.055
}
